image: java:8

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true"
  MAVEN_CLI_SECRETS: "-Dspring.mail.username=$MAIL_USERNAME -Dspring.mail.password=$MAIL_PASSWORD -Dtrakt.appId=$traktAppId -Dtrakt.appSecret=$traktAppSecret"
  MAVEN_CLI_THIRD_PARTY: ""
  # Disable the Gradle daemon for Continuous Integration servers as correctness
  # is usually a priority over speed in CI environments. Using a fresh
  # runtime for each build is more reliable since the runtime is completely
  # isolated from any previous builds.
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle


# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
    - .m2/repository
    - .gradle/wrapper
    - .gradle/caches


# This will only validate and compile stuff and run es.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
mvn compile:
  stage: build
  script:
  - './mvnw $MAVEN_CLI_OPTS -DskipDocker test-compile $MAVEN_CLI_SECRETS'
  - './gradlew '

mvn compile content service:
  stage: build
  script:
    - 'cd content-service'
    - './mvnw $MAVEN_CLI_OPTS -DskipDocker test-compile $MAVEN_CLI_SECRETS'

# Run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
mvn verify:
  stage: test
  script:
  - './mvnw $MAVEN_CLI_OPTS -DskipDocker verify'
  artifacts:
    paths:
    - target/*.jar

mvn verify content-service:
  stage: test
  script:
    - 'cd content-service'
    - './mvnw $MAVEN_CLI_OPTS -DskipDocker verify'
  artifacts:
    paths:
    - content-service/target/*.jar

build:
  stage: build
  script:
    - ./gradlew --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

test:
  stage: test
  script:
    - ./gradlew check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle
